rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(ownerId) {
      return isAuthenticated() && request.auth.uid == ownerId;
    }
    
    function isStoreOwner() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/stores/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin');
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/super_admins/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/super_admins/$(request.auth.uid)).data.isActive == true ||
         get(/databases/$(database)/documents/super_admins/$(request.auth.uid)).data.isActive == null);
    }
    
    function isValidString(text) {
      return text is string && text.size() > 0 && text.size() <= 1000;
    }
    
    function isValidPrice(price) {
      return price is number && price >= 0;
    }
    
    // Helper function to check if user owns the store for an order
    function isStoreOwnerForOrder(storeId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/stores/$(storeId)) &&
        get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid;
    }
    
    // Super Admin collection - only super admins can access
    match /super_admins/{adminId} {
      allow read: if isAuthenticated() && request.auth.uid == adminId;
      allow write: if isSuperAdmin(); // Only existing super admins can modify
      allow create: if isAuthenticated(); // Initial creation allowed for setup
    }
    
    // Admin activity logs - super admins can read all, individual admins can read their own
    match /admin_activity_logs/{logId} {
      allow read: if isSuperAdmin() || 
        (isAuthenticated() && resource.data.adminId == request.auth.uid);
      allow create: if isSuperAdmin();
    }
    
    // Platform statistics - super admins only
    match /platform_stats/{statId} {
      allow read, write: if isSuperAdmin();
    }
    
    // FCM tokens - users can manage their own, super admins can read all
    match /fcm_tokens/{tokenId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isSuperAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Notification queue - super admins and notification service can access
    match /notification_queue/{queueId} {
      allow read, write: if isSuperAdmin();
      allow create: if isSuperAdmin(); // Allow creation for notification service
    }
    
    // Notification analytics - super admins can read all
    match /notification_analytics/{analyticsId} {
      allow read, write: if isSuperAdmin();
      allow create: if isSuperAdmin(); // Allow creation for tracking
    }
    
    // App logs - authenticated users can create their own logs, super admins can read all
    match /app_logs/{logId} {
      allow read: if isSuperAdmin();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow write: if isSuperAdmin();
    }
    
    // User preferences (simple) - users can manage their own preferences
    match /user_preferences_simple/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Commission rules - super admins only
    match /commission_rules/{ruleId} {
      allow read, write, create: if isSuperAdmin();
    }
    
    // Commission transactions - super admins and store owners can read their own
    match /commission_transactions/{transactionId} {
      allow read: if isSuperAdmin() || 
        (isAuthenticated() && resource.data.vendorId == request.auth.uid);
      allow write: if isSuperAdmin();
      allow create: if isSuperAdmin(); // Hardened: Only super admins can create
    }
    
    // Users collection - users can access their own data, admins can access all, super admins have full access
    match /users/{userId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin() || isSuperAdmin());
      allow create: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin() || isSuperAdmin());
      
      // User addresses subcollection
      match /addresses/{addressId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == userId || isAdmin() || isSuperAdmin());
        allow create: if isAuthenticated() && 
          (request.auth.uid == userId || isAdmin() || isSuperAdmin());
      }
    }
    
    // Stores rules - more restrictive, super admins have full access
    match /stores/{storeId} {
      allow read, list: if true; // Public read is fine for store listings, but do not store sensitive data here!
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        isValidString(request.resource.data.name);
      allow update: if (isOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId) || isSuperAdmin();
      allow delete: if isOwner(resource.data.ownerId) || isSuperAdmin();
      
      // Store products subcollection
      match /products/{productId} {
        allow read, list: if true;
        allow create: if isAuthenticated() && 
          isOwner(get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId) &&
          isValidString(request.resource.data.name) &&
          isValidString(request.resource.data.description) &&
          isValidPrice(request.resource.data.price) &&
          request.resource.data.stock is int &&
          request.resource.data.stock >= 0 &&
          request.resource.data.images is list &&
          request.resource.data.images.size() > 0;
        allow update: if isAuthenticated() &&
          (isOwner(get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId) || 
           isAdmin() || isSuperAdmin());
        allow delete: if isAuthenticated() &&
          (isOwner(get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId) || 
           isAdmin() || isSuperAdmin());
           
        // Product reviews - nested under store products
        match /reviews/{reviewId} {
          allow read: if true; // Public read access
          allow create: if isAuthenticated() &&
            request.resource.data.userId == request.auth.uid &&
            request.resource.data.rating is int &&
            request.resource.data.rating >= 1 && 
            request.resource.data.rating <= 5;
          allow update, delete: if isAuthenticated() && 
            (resource.data.userId == request.auth.uid || isSuperAdmin());
        }
      }
      
      // Store reviews subcollection
      match /reviews/{reviewId} {
        allow read, list: if true; // Public read access to store reviews
        allow create: if isAuthenticated() &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.storeId == storeId &&
          request.resource.data.rating is number &&
          request.resource.data.rating >= 1 && 
          request.resource.data.rating <= 5 &&
          isValidString(request.resource.data.title) &&
          request.resource.data.comment is string &&
          request.resource.data.status == 'active';
        allow update: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || 
           isStoreOwnerForOrder(storeId) || 
           isSuperAdmin());
        allow delete: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || isSuperAdmin());
      }
    }
    
    // Products rules - validate product data with analytics access, super admins have full access
    match /products/{productId} {
      allow read, list: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.storeId is string &&
        isStoreOwnerForOrder(request.resource.data.storeId) &&
        isValidString(request.resource.data.name) &&
        isValidString(request.resource.data.description) &&
        isValidPrice(request.resource.data.price) &&
        request.resource.data.stock is int &&
        request.resource.data.stock >= 0 &&
        request.resource.data.images is list &&
        request.resource.data.images.size() > 0;
      allow update: if isAuthenticated() &&
        (isStoreOwnerForOrder(resource.data.storeId) || isAdmin() || isSuperAdmin()) &&
        (request.resource.data.storeId == resource.data.storeId || isSuperAdmin()); // Can't change store ownership unless super admin
      allow delete: if isAuthenticated() &&
        (isStoreOwnerForOrder(resource.data.storeId) || isAdmin() || isSuperAdmin());
    }
    
    // Product reviews - nested under products
    match /products/{productId}/reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.rating is int &&
        request.resource.data.rating >= 1 && 
        request.resource.data.rating <= 5;
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isSuperAdmin());
    }
    
    // Orders rules - secure order management with analytics access, super admins have full access
    match /orders/{orderId} {
      // Allow individual document reads
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isStoreOwnerForOrder(resource.data.storeId) ||
         isAdmin() || isSuperAdmin());
      // Allow collection queries for analytics (authenticated users can query with storeId filter)
      allow list: if isSuperAdmin() || isAdmin() ||
        (isAuthenticated() && (resource.data.userId == request.auth.uid || isStoreOwnerForOrder(resource.data.storeId)));
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        isValidPrice(request.resource.data.total);
      allow update: if isAuthenticated() && 
        (isStoreOwnerForOrder(resource.data.storeId) || 
         resource.data.userId == request.auth.uid || 
         isAdmin() || isSuperAdmin()); // Store owner can update status, user can update details
    }
    
    // User orders subcollection
    match /users/{userId}/orders/{orderId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == userId || isSuperAdmin());
    }

    // Discounts rules - store owners can manage their own discounts, super admins have full access
    match /discounts/{discountId} {
      allow read: if true; // Public read access for applying discounts
      allow create: if isAuthenticated() && 
        isValidString(request.resource.data.name) &&
        isValidString(request.resource.data.code) &&
        request.resource.data.code.size() >= 3 &&
        request.resource.data.type in ['freeShipping', 'percentage', 'fixedAmount'] &&
        request.resource.data.value is number &&
        request.resource.data.value >= 0 &&
        request.resource.data.maxUseCount is int &&
        request.resource.data.maxUseCount > 0 &&
        request.resource.data.currentUseCount is int &&
        request.resource.data.currentUseCount >= 0 &&
        request.resource.data.isActive is bool;
      allow update: if isAuthenticated() &&
        (request.resource.data.storeId == resource.data.storeId || isSuperAdmin()); // Can't change store ownership unless super admin
      allow delete: if isAuthenticated() || isSuperAdmin();
    }

    // Collections rules - store owners can manage their collections, super admins have full access
    match /collections/{collectionId} {
      allow read, list: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.storeId is string &&
        (exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
         get(/databases/$(database)/documents/stores/$(request.resource.data.storeId)).data.ownerId == request.auth.uid) &&
        isValidString(request.resource.data.name) &&
        request.resource.data.productIds is list &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp &&
        request.resource.data.isActive is bool;
      allow update: if isAuthenticated() &&
        (((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin()) && request.resource.data.storeId == resource.data.storeId) || isSuperAdmin(); // Can't change store ownership unless super admin
      allow delete: if isAuthenticated() &&
        ((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin() || isSuperAdmin());
    }

    // Store Categories rules - store owners can manage their categorization, super admins have full access
    match /store_categories/{categoryId} {
      allow read, list: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.storeId is string &&
        (exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
         get(/databases/$(database)/documents/stores/$(request.resource.data.storeId)).data.ownerId == request.auth.uid) &&
        isValidString(request.resource.data.name) &&
        request.resource.data.productIds is list &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp &&
        request.resource.data.isActive is bool &&
        request.resource.data.sortOrder is int;
      allow update: if isAuthenticated() &&
        (((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin()) && request.resource.data.storeId == resource.data.storeId) || isSuperAdmin(); // Can't change store ownership unless super admin
      allow delete: if isAuthenticated() &&
        ((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin() || isSuperAdmin());
    }

    // Seller cards rules - public read, store owners can manage, super admins have full access
    match /seller_cards/{storeId} {
      allow read, list: if true;
      allow create, update: if isAuthenticated() && 
        (exists(/databases/$(database)/documents/stores/$(storeId)) &&
        get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid &&
        request.resource.data.storeId == storeId &&
        request.resource.data.featuredProductIds is list) || isSuperAdmin();
      allow delete: if isAuthenticated() && 
        (exists(/databases/$(database)/documents/stores/$(storeId)) &&
        get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid) || isSuperAdmin();
    }

    // Notifications rules - handle both user notifications (userId) and admin notifications (ownerId)
    match /notifications/{notificationId} {
      allow read, list: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.ownerId == request.auth.uid || 
         isAdmin() || isSuperAdmin());
      allow create: if isAuthenticated() && 
        ((request.resource.data.userId == request.auth.uid) ||
         (request.resource.data.ownerId is string &&
          request.resource.data.storeId is string)) &&
        isValidString(request.resource.data.title) &&
        isValidString(request.resource.data.message) &&
        request.resource.data.type is string &&
        ((request.resource.data.createdAt is timestamp) || 
         (request.resource.data.createdAt == null)) &&
        ((request.resource.data.read is bool) || 
         (request.resource.data.isRead is bool));
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.ownerId == request.auth.uid || 
         isAdmin() || isSuperAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.ownerId == request.auth.uid || 
         isAdmin() || isSuperAdmin());
    }

    // Analytics events rules - authenticated users can create analytics events, super admins can read all
    match /analytics_events/{eventId} {
      allow read, list: if isSuperAdmin();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.type is string &&
        request.resource.data.timestamp is timestamp;
      allow update, delete: if isSuperAdmin();
    }

    // Reports collection - users can create reports, super admins can manage them
    match /reports/{reportId} {
      allow read: if isSuperAdmin() || 
        (isAuthenticated() && resource.data.reportedBy == request.auth.uid);
      allow list: if isSuperAdmin();
      allow create: if isAuthenticated() && 
        request.resource.data.reportedBy == request.auth.uid &&
        request.resource.data.type is string &&
        request.resource.data.targetId is string &&
        request.resource.data.reason is string &&
        request.resource.data.status == 'pending' &&
        request.resource.data.createdAt is timestamp;
      allow update, delete: if isSuperAdmin();
    }

    // Categories collection - public read access, super admins can manage
    match /categories/{categoryId} {
      allow read, list: if true;
      allow write, create, delete: if isSuperAdmin();
      
      // Subcategories collection
      match /subcategories/{subcategoryId} {
        allow read, list: if true;
        allow write, create, delete: if isSuperAdmin();
        
        // Leaf categories collection
        match /leafCategories/{leafCategoryId} {
          allow read, list: if true;
          allow write, create, delete: if isSuperAdmin();
        }
      }
    }

    // Platform settings - super admins can write, all users can read featured stores config
    match /platform_settings/{settingId} {
      allow read: if settingId == 'featured_stores' || isSuperAdmin();
      allow write, create: if isSuperAdmin();
    }

    // Store subscriptions - store owners can manage their own subscriptions, super admins have full access
    match /store_subscriptions/{subscriptionId} {
      allow read, write: if isAuthenticated() && 
        (subscriptionId == request.auth.uid || 
         (exists(/databases/$(database)/documents/stores/$(subscriptionId)) &&
          get(/databases/$(database)/documents/stores/$(subscriptionId)).data.ownerId == request.auth.uid) ||
         isSuperAdmin());
      allow create: if isAuthenticated() && 
        (subscriptionId == request.auth.uid ||
         (request.resource.data.storeId is string &&
          exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(request.resource.data.storeId)).data.ownerId == request.auth.uid)) ||
        isSuperAdmin();
      
      // Payment history subcollection
      match /payment_history/{paymentId} {
        allow read, write: if isAuthenticated() && 
          (subscriptionId == request.auth.uid || 
           (exists(/databases/$(database)/documents/stores/$(subscriptionId)) &&
            get(/databases/$(database)/documents/stores/$(subscriptionId)).data.ownerId == request.auth.uid) ||
           isSuperAdmin());
        allow create: if isAuthenticated() && 
          (subscriptionId == request.auth.uid ||
           (request.resource.data.storeId is string &&
            exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
            get(/databases/$(database)/documents/stores/$(request.resource.data.storeId)).data.ownerId == request.auth.uid)) ||
          isSuperAdmin();
      }
    }

    // Featured products collection - super admin managed, public read access
    match /featured_products/{categoryPath} {
      allow read, list: if true;
      allow write, create, delete: if isSuperAdmin() || isAdmin();
    }

    // Featured brands collection - super admin managed, public read access
    match /featured_brands/{categoryPath} {
      allow read, list: if true;
      allow write, create, delete: if isSuperAdmin() || isAdmin();
    }
  }
} 