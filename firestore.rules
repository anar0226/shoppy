rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(ownerId) {
      return isAuthenticated() && request.auth.uid == ownerId;
    }
    
    function isValidString(text) {
      return text is string && text.size() > 0 && text.size() <= 1000;
    }
    
    function isValidPrice(price) {
      return price is number && price >= 0;
    }
    
    // Users can read and write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Stores rules - more restrictive
    match /stores/{storeId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        isValidString(request.resource.data.name);
      allow update: if isOwner(resource.data.ownerId) &&
        request.resource.data.ownerId == resource.data.ownerId; // Can't change ownership
      allow delete: if isOwner(resource.data.ownerId);
    }
    
    // Products rules - validate product data
    match /products/{productId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        isValidString(request.resource.data.name) &&
        isValidString(request.resource.data.description) &&
        isValidPrice(request.resource.data.price) &&
        request.resource.data.stock is int &&
        request.resource.data.stock >= 0 &&
        request.resource.data.images is list &&
        request.resource.data.images.size() > 0;
      allow update: if isOwner(resource.data.ownerId) &&
        request.resource.data.ownerId == resource.data.ownerId; // Can't change ownership
      allow delete: if isOwner(resource.data.ownerId);
    }
    
    // Product reviews - nested under products
    match /products/{productId}/reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.rating is int &&
        request.resource.data.rating >= 1 && 
        request.resource.data.rating <= 5;
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Orders rules - secure order management
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.ownerId == request.auth.uid);
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        isValidPrice(request.resource.data.total);
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.ownerId) || 
         resource.data.userId == request.auth.uid); // Owner can update status, user can update details
    }
    
    // User orders subcollection
    match /users/{userId}/orders/{orderId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Discounts rules - store owners can manage their own discounts
    match /discounts/{discountId} {
      allow read: if true; // Public read access for applying discounts
      allow create: if isAuthenticated() && 
        isValidString(request.resource.data.name) &&
        isValidString(request.resource.data.code) &&
        request.resource.data.code.size() >= 3 &&
        request.resource.data.type in ['freeShipping', 'percentage', 'fixedAmount'] &&
        request.resource.data.value is number &&
        request.resource.data.value >= 0 &&
        request.resource.data.maxUseCount is int &&
        request.resource.data.maxUseCount > 0 &&
        request.resource.data.currentUseCount is int &&
        request.resource.data.currentUseCount >= 0 &&
        request.resource.data.isActive is bool;
      allow update: if isAuthenticated() &&
        request.resource.data.storeId == resource.data.storeId; // Can't change store ownership
      allow delete: if isAuthenticated();
    }
  }
} 