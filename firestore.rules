rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(ownerId) {
      return isAuthenticated() && request.auth.uid == ownerId;
    }
    
    function isStoreOwner() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/stores/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (
          // Check if user has userType == 'admin' in their profile
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin') ||
          // OR temporarily allow any authenticated user for testing
          true
        );
    }
    
    function isValidString(text) {
      return text is string && text.size() > 0 && text.size() <= 1000;
    }
    
    function isValidPrice(price) {
      return price is number && price >= 0;
    }
    
    // Helper function to check if user owns the store for an order
    function isStoreOwnerForOrder(storeId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/stores/$(storeId)) &&
        get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid;
    }
    
    // Users collection - users can access their own data, admins can access all
    match /users/{userId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      allow create: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      
      // User addresses subcollection
      match /addresses/{addressId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == userId || isAdmin());
        allow create: if isAuthenticated() && 
          (request.auth.uid == userId || isAdmin());
      }
    }
    
    // Stores rules - more restrictive
    match /stores/{storeId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        isValidString(request.resource.data.name);
      allow update: if isOwner(resource.data.ownerId) &&
        request.resource.data.ownerId == resource.data.ownerId; // Can't change ownership
      allow delete: if isOwner(resource.data.ownerId);
    }
    
    // Products rules - validate product data with analytics access
    match /products/{productId} {
      allow read: if true; // Public read access for browsing
      allow list: if true; // Allow collection queries for public browsing and analytics
      allow create: if isAuthenticated() && 
        request.resource.data.storeId is string &&
        isStoreOwnerForOrder(request.resource.data.storeId) &&
        isValidString(request.resource.data.name) &&
        isValidString(request.resource.data.description) &&
        isValidPrice(request.resource.data.price) &&
        request.resource.data.stock is int &&
        request.resource.data.stock >= 0 &&
        request.resource.data.images is list &&
        request.resource.data.images.size() > 0;
      allow update: if isAuthenticated() &&
        (isStoreOwnerForOrder(resource.data.storeId) || isAdmin()) &&
        request.resource.data.storeId == resource.data.storeId; // Can't change store ownership
      allow delete: if isAuthenticated() &&
        (isStoreOwnerForOrder(resource.data.storeId) || isAdmin());
    }
    
    // Product reviews - nested under products
    match /products/{productId}/reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.rating is int &&
        request.resource.data.rating >= 1 && 
        request.resource.data.rating <= 5;
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Orders rules - secure order management with analytics access
    match /orders/{orderId} {
      // Allow individual document reads
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isStoreOwnerForOrder(resource.data.storeId) ||
         isAdmin());
      // Allow collection queries for analytics (authenticated users can query with storeId filter)
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        isValidPrice(request.resource.data.total);
      allow update: if isAuthenticated() && 
        (isStoreOwnerForOrder(resource.data.storeId) || 
         resource.data.userId == request.auth.uid || 
         isAdmin()); // Store owner can update status, user can update details
    }
    
    // User orders subcollection
    match /users/{userId}/orders/{orderId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Discounts rules - store owners can manage their own discounts
    match /discounts/{discountId} {
      allow read: if true; // Public read access for applying discounts
      allow create: if isAuthenticated() && 
        isValidString(request.resource.data.name) &&
        isValidString(request.resource.data.code) &&
        request.resource.data.code.size() >= 3 &&
        request.resource.data.type in ['freeShipping', 'percentage', 'fixedAmount'] &&
        request.resource.data.value is number &&
        request.resource.data.value >= 0 &&
        request.resource.data.maxUseCount is int &&
        request.resource.data.maxUseCount > 0 &&
        request.resource.data.currentUseCount is int &&
        request.resource.data.currentUseCount >= 0 &&
        request.resource.data.isActive is bool;
      allow update: if isAuthenticated() &&
        request.resource.data.storeId == resource.data.storeId; // Can't change store ownership
      allow delete: if isAuthenticated();
    }

    // Collections rules - store owners can manage their collections
    match /collections/{collectionId} {
      allow read: if true; // Public read access for customers to view collections
      allow list: if true; // Allow collection queries for public browsing
      allow create: if isAuthenticated() && 
        request.resource.data.storeId is string &&
        (exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
         get(/databases/$(database)/documents/stores/$(request.resource.data.storeId)).data.ownerId == request.auth.uid) &&
        isValidString(request.resource.data.name) &&
        request.resource.data.productIds is list &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp &&
        request.resource.data.isActive is bool;
      allow update: if isAuthenticated() &&
        ((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin()) &&
        request.resource.data.storeId == resource.data.storeId; // Can't change store ownership
      allow delete: if isAuthenticated() &&
        ((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin());
    }

    // Store Categories rules - store owners can manage their categorization
    match /store_categories/{categoryId} {
      allow read: if true; // Public read access for customers to view categories
      allow list: if true; // Allow collection queries for public browsing
      allow create: if isAuthenticated() && 
        request.resource.data.storeId is string &&
        (exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
         get(/databases/$(database)/documents/stores/$(request.resource.data.storeId)).data.ownerId == request.auth.uid) &&
        isValidString(request.resource.data.name) &&
        request.resource.data.productIds is list &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp &&
        request.resource.data.isActive is bool &&
        request.resource.data.sortOrder is int;
      allow update: if isAuthenticated() &&
        ((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin()) &&
        request.resource.data.storeId == resource.data.storeId; // Can't change store ownership
      allow delete: if isAuthenticated() &&
        ((exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
          get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid) || 
         isAdmin());
    }

    // Seller cards rules - public read, store owners can manage
    match /seller_cards/{storeId} {
      allow read: if true; // Public read access for home screen to display seller cards
      allow list: if true; // Allow querying seller cards for home screen
      allow create, update: if isAuthenticated() && 
        exists(/databases/$(database)/documents/stores/$(storeId)) &&
        get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid &&
        request.resource.data.storeId == storeId &&
        request.resource.data.featuredProductIds is list;
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/stores/$(storeId)) &&
        get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid;
    }

    // Notifications rules - store owners can manage their notifications
    match /notifications/{notificationId} {
      allow read, list: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId is string &&
        request.resource.data.storeId is string &&
        isValidString(request.resource.data.title) &&
        isValidString(request.resource.data.message) &&
        request.resource.data.type is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.isRead is bool;
      allow update: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
    }
  }
} 