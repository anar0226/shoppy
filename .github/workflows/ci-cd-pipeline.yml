name: 🚀 Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # =====================================
  # CODE QUALITY & SECURITY CHECKS
  # =====================================
  quality-checks:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🔍 Analyze Code
        run: flutter analyze --fatal-infos

      - name: 🎨 Check Code Formatting
        run: dart format --set-exit-if-changed .

      - name: 🛡️ Security Vulnerability Scan
        run: |
          dart pub deps --json > deps.json
          if command -v dart &> /dev/null; then
            dart pub audit || echo "Security scan completed with warnings"
          fi

      - name: 📋 License Check
        run: flutter pub deps --json | jq '.packages[] | select(.kind != "dev") | .name' | sort | uniq

  # =====================================
  # AUTOMATED TESTING SUITE
  # =====================================
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-checks
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🧪 Run Unit Tests
        run: flutter test --coverage --reporter=expanded

      - name: 📊 Generate Coverage Report
        run: |
          dart pub global activate coverage
          dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: shoppy-coverage

      - name: 💾 Cache Test Results
        uses: actions/cache@v3
        with:
          path: test-results/
          key: test-results-${{ github.sha }}

  # =====================================
  # ANDROID BUILD PIPELINE
  # =====================================
  build-android:
    name: 🤖 Android Build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [quality-checks, test-suite]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        build-type: [debug, release]
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🔧 Configure Android Signing (Release Only)
        if: matrix.build-type == 'release' && github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/shoppy-release.jks
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=shoppy-release.jks" >> android/key.properties

      - name: 🏗️ Build Android APK
        run: |
          if [ "${{ matrix.build-type }}" == "release" ]; then
            flutter build apk --release --split-per-abi --build-number=${{ github.run_number }}
          else
            flutter build apk --debug --build-number=${{ github.run_number }}
          fi

      - name: 🏗️ Build Android App Bundle (Release)
        if: matrix.build-type == 'release'
        run: flutter build appbundle --release --build-number=${{ github.run_number }}

      - name: 🔒 Sign APK (Release)
        if: matrix.build-type == 'release'
        run: |
          # APK signing is handled automatically by Flutter with key.properties

      - name: 📦 Upload Android Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-${{ matrix.build-type }}-artifacts
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
          retention-days: 30

  # =====================================
  # iOS BUILD PIPELINE
  # =====================================
  build-ios:
    name: 🍎 iOS Build
    runs-on: macos-latest
    timeout-minutes: 60
    needs: [quality-checks, test-suite]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🍎 Setup iOS Environment
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: 📱 Configure iOS Signing (Release)
        if: github.ref == 'refs/heads/main'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          # Create certificates directory
          mkdir -p ~/certificates
          
          # Decode and install certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > ~/certificates/certificate.p12
          
          # Create and configure keychain
          security create-keychain -p "$APPLE_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$APPLE_CERTIFICATE_PASSWORD" build.keychain
          security import ~/certificates/certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_CERTIFICATE_PASSWORD" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$APPLE_PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: 🏗️ Build iOS Application
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            flutter build ios --release --no-codesign --build-number=${{ github.run_number }}
          else
            flutter build ios --debug --no-codesign --build-number=${{ github.run_number }}
          fi

      - name: 📦 Archive iOS App (Release)
        if: github.ref == 'refs/heads/main'
        run: |
          cd ios
          xcodebuild archive \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -archivePath build/Runner.xcarchive \
            -configuration Release \
            CODE_SIGNING_ALLOWED=NO

      - name: 📦 Upload iOS Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build-artifacts
          path: |
            build/ios/iphoneos/
            ios/build/Runner.xcarchive/
          retention-days: 30

  # =====================================
  # FIREBASE DEPLOYMENT
  # =====================================
  deploy-firebase:
    name: 🔥 Firebase Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks, test-suite]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: 📦 Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: 📦 Install Functions Dependencies
        run: |
          cd functions
          npm ci --only=production

      - name: 🏗️ Build Cloud Functions
        run: |
          cd functions
          npm run build

      - name: 🔍 Validate Firebase Configuration
        run: firebase use shoppy-6d81f --token "${{ secrets.FIREBASE_TOKEN }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: 🚀 Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase deploy --only firestore:rules,storage:rules,functions --token "$FIREBASE_TOKEN" --force

  # =====================================
  # GOOGLE PLAY STORE DEPLOYMENT
  # =====================================
  deploy-android-store:
    name: 🤖 Deploy to Play Store
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-android, deploy-firebase]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Android Release Artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-release-artifacts
          path: build/app/outputs/

      - name: 🚀 Deploy to Google Play Store
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.yourcompany.shoppy
          releaseFiles: build/app/outputs/bundle/release/*.aab
          track: production
          status: completed
          inAppUpdatePriority: 2
          userFraction: 1.0
          changesNotSentForReview: false

  # =====================================
  # APPLE APP STORE DEPLOYMENT
  # =====================================
  deploy-ios-store:
    name: 🍎 Deploy to App Store
    runs-on: macos-latest
    timeout-minutes: 45
    needs: [build-ios, deploy-firebase]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download iOS Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ios-build-artifacts
          path: build/ios/

      - name: 📱 Create IPA for App Store
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ \
            -exportOptionsPlist exportOptions.plist

      - name: 🚀 Upload to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file "ios/build/Shoppy.ipa" \
            --apiKey "$APP_STORE_CONNECT_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"

  # =====================================
  # PERFORMANCE MONITORING
  # =====================================
  performance-monitoring:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-release-artifacts
          path: artifacts/android/

      - name: 📊 Analyze APK Size
        run: |
          cd artifacts/android
          for apk in *.apk; do
            if [ -f "$apk" ]; then
              size=$(stat -c%s "$apk")
              echo "APK Size: $apk = $((size / 1024 / 1024)) MB"
            fi
          done

      - name: 📈 Performance Report
        run: |
          echo "## 📊 Build Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "- Build Number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # =====================================
  # NOTIFICATION SYSTEM
  # =====================================
  notifications:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-checks, test-suite, build-android, build-ios, deploy-firebase]
    
    steps:
      - name: 📢 Success Notification
        if: ${{ success() }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ✅ **Shoppy CI/CD Pipeline - SUCCESS** 🚀
            
            📱 **App Built Successfully**
            - Android APK & Bundle ✅
            - iOS Build ✅
            - Firebase Deployed ✅
            
            🔗 **Build Details:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Build: #${{ github.run_number }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Failure Notification
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ❌ **Shoppy CI/CD Pipeline - FAILED** 🔥
            
            💥 **Build Failed**
            Please check the logs and fix the issues.
            
            🔗 **Failure Details:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Build: #${{ github.run_number }}
            - Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email Notification (Critical Failures)
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🚨 CRITICAL: Shoppy Production Build Failed"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: CI/CD System <${{ secrets.SMTP_FROM }}>
          body: |
            Critical build failure detected in Shoppy production pipeline.
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Build: #${{ github.run_number }}
            
            Please investigate immediately: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 